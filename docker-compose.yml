networks:
  api-data-network:
    external: true
    driver: bridge

x-bake:
  targets:
    default:
      platforms:
        - ${DEFAULT_PLATFORM:-linux/arm64}
        - ${ALTERNATIVE_PLATFORM:-linux/amd64}

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: api-data_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CLIENT_PORT}
      ZOOKEEPER_TICK_TIME: ${ZOOKEEPER_TICK_TIME}
    ports:
      - "2181:2181"
    networks:
      - api-data-network
    healthcheck:
      test: [ "CMD-SHELL", "echo ruok | nc localhost 2181" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: api-data_kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID}
      KAFKA_ZOOKEEPER_CONNECT: ${KAFKA_ZOOKEEPER_CONNECT}
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: ${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP}
      KAFKA_INTER_BROKER_LISTENER_NAME: ${KAFKA_INTER_BROKER_LISTENER_NAME}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
      MIN_COMMIT_COUNT: ${MIN_COMMIT_COUNT:-10}
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:${KAFKA_PORT}
      KAFKA_MESSAGE_MAX_BYTES: 10485760
      KAFKA_REPLICA_FETCH_MAX_BYTES: 10485760
    networks:
      - api-data-network
    ports:
      - "${KAFKA_PORT}:${KAFKA_PORT}"
    healthcheck:
      test: [ "CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:${KAFKA_PORT}" ]
      interval: 10s
      timeout: 5s
      retries: 10

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    container_name: api-data_schema-registry
    platform: ${PLATFORM}
    hostname: api-data_schema-registry
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - api-data-network
    ports:
      - "${SCHEMA_REGISTRY_PORT}:${SCHEMA_REGISTRY_PORT}"
    healthcheck:
      test: [ "CMD", "curl", "--output", "/dev/null", "--silent", "--head", "--fail", "http://schema-registry:${SCHEMA_REGISTRY_PORT}/subjects" ]
      interval: 30s
      timeout: 10s
      retries: 10
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'PLAINTEXT://kafka:${KAFKA_PORT}'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:${SCHEMA_REGISTRY_PORT}

  init-kafka:
    build: ./init-kafka
    container_name: api-data_init-kafka
    depends_on:
      kafka:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
    environment:
      KAFKA_PORT: ${KAFKA_PORT}
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CLIENT_PORT}
      SCHEMA_REGISTRY_PORT: ${SCHEMA_REGISTRY_PORT}
    networks:
      - api-data-network
    volumes:
      - ./avro-schemas:/avro-schemas:ro

  faust:
    container_name: api-data_faust
    build:
      context: ./faust-processor/
    depends_on:
      - init-kafka
      - riot-petitions
    restart: always
    environment:
      KAFKA_BROKER: kafka
      KAFKA_PORT: ${KAFKA_PORT}
      SCHEMA_REGISTRY_URL: http://schema-registry:${SCHEMA_REGISTRY_PORT}
      SIMPLE_SETTINGS: settings
      WORKER_PORT: 6066
      TOPIC_MATCH_DATA: ${TOPIC_MATCH_DATA}
      TOPIC_MATCH_TO_STORE: ${TOPIC_MATCH_TO_STORE}
      TOPIC_MATCH_PLAYER_DATA: ${TOPIC_MATCH_PLAYER_DATA}
      TOPIC_MATCH_TEAM_DATA: ${TOPIC_MATCH_TEAM_DATA}
      TOPIC_MATCH_GAME_DATA: ${TOPIC_MATCH_GAME_DATA}
    networks:
      - api-data-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:6066/" ]
      interval: 30s
      timeout: 10s
      retries: 5
    ports:
      - "6066:6066" # Expose the Faust web monitor if needed

  backend:
    container_name: api-data_backend
    depends_on:
      - init-kafka
    build:
      context: ./backend/
    restart: always
    env_file:
      - .env
    environment:
      BACKEND_PORT: ${BACKEND_PORT:-8000}
      KAFKA_BROKER: ${KAFKA_BROKER}
      KAFKA_PORT: ${KAFKA_PORT}
    ports:
      - "${BACKEND_PORT}:80"
    networks:
      - api-data-network

  riot-petitions:
    container_name: api-data_riot-petitions
    depends_on:
      redis:
        condition: service_healthy
      init-kafka:
        condition: service_completed_successfully

    build:
      context: ./riot-petitions
      args:
        - GITHUB_TOKEN=${GITHUB_PERSONAL_ACCESS_TOKEN_CLASSIC}
        - TARGETARCH=${TARGETARCH:-arm64}
        - PLATFORM=${PLATFORM:-linux/arm64}
    platform: ${PLATFORM}
    user: "${USER_ID}:${GROUP_ID}"
    restart: always
    env_file:
      - .env
    environment:
      PLATFORM: ${PLATFORM:-linux/amd64}
      RATE_LIMITER_PORT: ${RATE_LIMITER_PORT:-8011}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_HOST: ${REDIS_HOST}
      KAFKA_HOST: kafka_host
      KAFKA_BROKER: ${KAFKA_BROKER}
      KAFKA_PORT: ${KAFKA_PORT}
      SCHEMA_REGISTRY_PORT: ${SCHEMA_REGISTRY_PORT}
      TOPIC_DOWNLOAD_STATUS: download-status
      TOPIC_MATCH_DATA: match-data
      GITHUB_TOKEN: ${GITHUB_PERSONAL_ACCESS_TOKEN_CLASSIC}
      TOPIC_USER_EXISTS: download-user-exists
      POP_SLEEP_MILLISECONDS: 10000
      MIN_MONTH: 202407
      GOROUTINES_PER_REGION: 1
      LOGS_TO_FILE: False
    volumes:
      - ./riot-petitions/logs/:/app/logs
    networks:
      - api-data-network

  redis:
    container_name: api-data_redis
    image: redis:alpine
    command: redis-server /usr/local/etc/redis/redis.conf
    environment:
      REDIS_PORT: ${REDIS_PORT}
      REDIS_REPLICATION_MODE: master
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    volumes:
      - ./redis/redis-data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - api-data-network

  db:
    container_name: api-data_db
    image: postgres:latest
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: my-secret-pw
      POSTGRES_DB: mydb
    depends_on:
      - riot-petitions
      - backend
    ports:
      - "5432:5432"
    volumes:
      - ./postgresql:/var/lib/postgresql/data
    networks:
      - api-data-network

volumes:
  redis-data:
